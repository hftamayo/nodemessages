swagger: "2.0"
info:
  description: "Post messages, backend on Node.JS"
  version: "0.0.1"
  title: "Post messages"
  termsOfService: "Not available"
  contact: 
    name: "Herbert Fernandez Tamayo"
    email: "hftamayo@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3006"
basePath: "/"
schemes:
- "http"
- "https"
tags:
- name: "get posts"
  description: "get all available post messages"
paths:
  /feed/posts:
    get:
      tags:
      - "get posts"
      summary: "Returns all available posts"
      description: "Return all available posts"
      operationId: "posts"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Fetched posts successfully"
        "500":
          description: "no descriptive error thrown"
  /feed/post:
    post:
      tags:
      - "new post"
      summary: "Create a new post message"
      description: "send the required fields for a new post"
      operationId: "post"
      produces:
      - "application/json"
      parameters:
        - "in": "body"
          "name": "post"
          "description": "post to create"
          "schema":
             type: object
             required:
             - title
             - imageUrl
             - content
             properties:
               title:
                  type: string
               imageUrl:
                  type: string
               content:
                  type: string
      responses:
        "201":
          description: "Post created successfully, id, title, content"
        "500":
          description: "no descriptive error thrown"
  /feed/post/{postId}:
    delete:
      tags:
      - "get post"
      summary: "display a post found by id"
      description: "display a post found by id, try these ones: 63766f7ac91610c4f5a76c23 | 637fc0c84585f13ec43d53af"
      operationId: "get"
      produces:
      - "application/json"
      parameters:
        - in: path
          name: postId
          required: true
          description: post to find
          type: string

      responses:
        "200":
          description: "Post fetched | deleted post"
        "404":
          description: "Could not find post"
        "500":
          description: "no descriptive error thrown"          
  /feed/post/{postId}:
    put:
      tags:
      - "update a post"
      summary: "update a post found by id"
      description: "update a post found by id, try these one: 63766f7ac91610c4f5a76c23"
      operationId: "put"
      produces:
      - "application/json"
      parameters:
        - in: path
          name: postId
          required: true
          description: post to find
          type: string
      requestBody:
         required: true
         content:
            application/json:
               schema:
                  $ref: '#components/schemas/Book'
      responses:
        "200":
          description: "Post updated sucessfully"
          content:
             application/json:
                schema:
                   type: array
                   items:
                      $ref: '#components/schemas/Book'
                   
        "404":
          description: "Could not find post"
        "500":
          description: "no descriptive error thrown"

definitions:
  Post:
    type: "object"
    required:
    - "title"
    - "content"
    properties:
      id:
        type: "integer"
        format: "mm/dd/yy hh:mm:ss"
      title:
        type: "string"
        example: "rest api with go"
      imageUrl:
        type: "string"
        example: "images/piquina.png"
      content:
        type: "string"
        example: "this is a great book"


        ********************************************
        paths:
  /pet:
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
            
components:
  schemas:
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  
